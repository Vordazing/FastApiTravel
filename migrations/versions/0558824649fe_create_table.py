"""create_table

Revision ID: 0558824649fe
Revises: 
Create Date: 2023-06-06 23:14:00.126700

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0558824649fe'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rating')
    op.drop_table('account')
    op.drop_table('report')
    op.drop_table('moderators_work')
    op.drop_table('employee_info')
    op.drop_table('categories')
    op.drop_table('territory')
    op.drop_table('user_info')
    op.drop_table('locality')
    op.drop_table('country')
    op.drop_table('admins_work')
    op.drop_table('post_processing')
    op.drop_table('achievement')
    op.drop_table('postinfo')
    op.drop_table('general_information')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('general_information',
    sa.Column('id_general_information', sa.INTEGER(), server_default=sa.text("nextval('general_information_id_general_information_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('surname', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('patronymic', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('mail', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('rating', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['account.id_account'], name='general_information_account_id_account_fk'),
    sa.PrimaryKeyConstraint('id_general_information', name='general_information_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('postinfo',
    sa.Column('id_postinfo', sa.INTEGER(), server_default=sa.text("nextval('postinfo_id_postinfo_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('country_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data', sa.DATE(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('categories_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('На проверке', 'Одобренно', 'Отклоненно', name='status'), server_default=sa.text("'На проверке'::status"), autoincrement=False, nullable=True),
    sa.Column('account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['account.id_account'], name='postinfo_account_id_account_fk'),
    sa.ForeignKeyConstraint(['categories_id'], ['categories.id_categories'], name='postinfo_categories_id_categories_fk'),
    sa.ForeignKeyConstraint(['country_id'], ['locality.id_locality'], name='postinfo_locality_id_locality_fk'),
    sa.PrimaryKeyConstraint('id_postinfo', name='postinfo_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('achievement',
    sa.Column('id_achievement', sa.INTEGER(), server_default=sa.text("nextval('achievement_id_achievement_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('achievement', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('condition', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_achievement', name='achievement_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('post_processing',
    sa.Column('id_postpr', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('geninfo_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['geninfo_id'], ['general_information.id_general_information'], name='post_processing_general_information_id_general_information_fk'),
    sa.ForeignKeyConstraint(['post_id'], ['postinfo.id_postinfo'], name='post_processing_postinfo_id_postinfo_fk'),
    sa.PrimaryKeyConstraint('id_postpr', name='post_processing_pkey')
    )
    op.create_table('admins_work',
    sa.Column('id_admin', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('geninfo_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_of_moderators_processed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['geninfo_id'], ['general_information.id_general_information'], name='admins_work_general_information_id_general_information_fk'),
    sa.PrimaryKeyConstraint('id_admin', name='admins_work_pkey'),
    sa.UniqueConstraint('geninfo_id', name='admins_geninfo_id_unique')
    )
    op.create_table('country',
    sa.Column('id_country', sa.INTEGER(), server_default=sa.text("nextval('country_id_country_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_country', name='country_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('locality',
    sa.Column('id_locality', sa.INTEGER(), server_default=sa.text("nextval('locality_id_locality_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('territory_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['territory_id'], ['territory.id_territory'], name='locality_territory_id_territory_fk'),
    sa.PrimaryKeyConstraint('id_locality', name='locality_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_info',
    sa.Column('id_userinfo', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('post_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('achievement_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['account.id_account'], name='user_info_account_id_account_fk'),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievement.id_achievement'], name='user_info_achievement_id_achievement_fk'),
    sa.PrimaryKeyConstraint('id_userinfo', name='user_info_pkey')
    )
    op.create_table('territory',
    sa.Column('id_territory', sa.INTEGER(), server_default=sa.text("nextval('territory_id_territory_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('country_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['country.id_country'], name='territory_country_id_country_fk'),
    sa.PrimaryKeyConstraint('id_territory', name='territory_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('categories',
    sa.Column('id_categories', sa.INTEGER(), server_default=sa.text("nextval('categories_id_categories_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_categories', name='categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('employee_info',
    sa.Column('id_infoemp', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('geninfo_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('work_experience', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('salary', postgresql.MONEY(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['geninfo_id'], ['general_information.id_general_information'], name='employee_info_general_information_id_general_information_fk'),
    sa.PrimaryKeyConstraint('id_infoemp', name='employee_info_pkey')
    )
    op.create_table('moderators_work',
    sa.Column('id_modwork', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('geninfo_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_of_warnings', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_of_processed_posts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['geninfo_id'], ['general_information.id_general_information'], name='moderators_work_general_information_id_general_information_fk'),
    sa.PrimaryKeyConstraint('id_modwork', name='moderators_work_pkey'),
    sa.UniqueConstraint('geninfo_id', name='moderators_work_geninfo_id_unique')
    )
    op.create_table('report',
    sa.Column('id_report', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('moder_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['general_information.id_general_information'], name='report_general_information_id_general_information_fk'),
    sa.ForeignKeyConstraint(['moder_id'], ['general_information.id_general_information'], name='report_general_information_id_general_information_fk2'),
    sa.PrimaryKeyConstraint('id_report', name='report_pkey')
    )
    op.create_table('account',
    sa.Column('id_account', sa.INTEGER(), server_default=sa.text("nextval('account_id_account_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('login', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('work', 'blocked', name='client_status'), server_default=sa.text("'work'::client_status"), autoincrement=False, nullable=True),
    sa.Column('post', postgresql.ENUM('moderator', 'administrator', 'member', name='post_new'), server_default=sa.text("'member'::post_new"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_account', name='account_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('rating',
    sa.Column('id_rating', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('record_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('estimation', postgresql.ENUM('1', '2', '3', '4', '5', name='estimation'), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['account.id_account'], name='rating_account_id_account_fk'),
    sa.ForeignKeyConstraint(['record_id'], ['postinfo.id_postinfo'], name='rating_postinfo_id_postinfo_fk'),
    sa.PrimaryKeyConstraint('id_rating', name='rating_pkey')
    )
    # ### end Alembic commands ###
